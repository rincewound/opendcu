use barracuda_core::io::OutputState;


pub enum DoorStateContainer
{
    NormalOp(NormalOperation),
    ReleasedOnce(ReleasedOnce),
    ReleasePerm,
    Blocked,
    Emergency
}

pub enum DoorEvent
{
    ValidDoorOpenRequestSeen,
    Opened,
    Closed,
    DoorOpenProfileActive,
    DoorOpenProfileInactive,
    BlockingContactEngaged,
    BlockingContactDisengaged,
    ReleaseSwitchEngaged,
    ReleaseSwitchDisengaged
}

// Generated by the FSM, consumed by outputs. The inputs
// don't consume doorevents at all
pub enum DoorCommand
{
    ToggleElectricStrike(OutputState),
    ToggleAccessAllowed(OutputState),
    ToggleAlarmRelay(OutputState),
}

// Use Enum dispatch here!
pub trait DoorStateImpl
{
    fn dispatch_door_event(self, d: DoorEvent, commands: &mut Vec<DoorCommand>) -> DoorStateContainer;
}

pub struct NormalOperation{}

impl DoorStateImpl for NormalOperation
{
    fn dispatch_door_event(self, d: DoorEvent, commands: &mut Vec<DoorCommand>) -> DoorStateContainer {
        match d
        {
            DoorEvent::ValidDoorOpenRequestSeen => {
                                    commands.push(DoorCommand::ToggleElectricStrike(OutputState::High));
                                    commands.push(DoorCommand::ToggleAccessAllowed(OutputState::High));
                                    return DoorStateContainer::ReleasedOnce(ReleasedOnce{});
                                }
            DoorEvent::Opened => {
                                    // Door forced open!
                                    commands.push(DoorCommand::ToggleAlarmRelay(OutputState::High))
                                }
            DoorEvent::Closed => {}
            DoorEvent::DoorOpenProfileActive => {}
            DoorEvent::DoorOpenProfileInactive => {}
            DoorEvent::BlockingContactEngaged => {return DoorStateContainer::Blocked;}
            DoorEvent::BlockingContactDisengaged => {}
            DoorEvent::ReleaseSwitchEngaged => {return DoorStateContainer::Emergency;}
            DoorEvent::ReleaseSwitchDisengaged => {}
        }
        return DoorStateContainer::NormalOp(self)
    }
}


pub struct ReleasedOnce{}

impl DoorStateImpl for ReleasedOnce
{
    fn dispatch_door_event(self, d: DoorEvent, commands: &mut Vec<DoorCommand>) -> DoorStateContainer {
        match d
        {
            DoorEvent::ValidDoorOpenRequestSeen => {}
            DoorEvent::Opened => {
                    commands.push(DoorCommand::ToggleElectricStrike(OutputState::Low))
                }
            DoorEvent::Closed => {
                    commands.push(DoorCommand::ToggleAccessAllowed(OutputState::Low));
                    return DoorStateContainer::NormalOp(NormalOperation{});
                }
            DoorEvent::DoorOpenProfileActive => {}
            DoorEvent::DoorOpenProfileInactive => {}
            DoorEvent::BlockingContactEngaged => {return DoorStateContainer::Blocked;}
            DoorEvent::BlockingContactDisengaged => {}
            DoorEvent::ReleaseSwitchEngaged => {return DoorStateContainer::Emergency;}
            DoorEvent::ReleaseSwitchDisengaged => {}
        }
        return DoorStateContainer::ReleasedOnce(self)
    }
}